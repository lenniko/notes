# c#引用类型和值类型
C#的类型一共分为两类，一种是值类型（Value Type）,一类是引用类型（Reference）。值类型的变量直接存储数据，而引用类型的变量持有的是数据的引用，数据存储在数据堆中。
## 值类型 （value type）
byte，short，int，long，float，double，decimal，char，bool 和 struct 统称为值类型。值类型变量声明后，不管是否已经赋值，编译器为其分配内存。
## 引用类型（reference type）
string 和 class统称为引用类型。当声明一个类时，只在栈中分配一小片内存用于容纳一个地址，而此时并没有为其分配堆上的内存空间。当使用 new 创建一个类的实例时，分配堆上的空间，并把堆上空间的地址保存到栈上分配的小片空间中。
## 区别
1.值类型通常被人们称为轻量级的类型，因为在大多数情况下，值类型的的实例都分配在线程栈中，因此它不受垃圾回收的控制，缓解了托管堆中的压力，减少了应用程序的垃圾回收的次数，提高性能。
2.所有的引用类型的实例都分配在托管堆上，c#中new操作符会返回一个内存地址指向当前的对象。所以当你在创建一个引用类型实例的时候，必须要考虑以下问题：
1. 内存是在托管堆上分配的
2. 在分配每一个对象时都会包含一些额外的成员（类型对象指针，同步块索引），这些成员必须初始化
3. 对象中的其他字节总是设为零
4. 在分配对象时，可能会进行一次垃圾回收操作（如果托管堆上的内存不够分配一次对象时）
## 性能
1. 在设计一个应用程序时，如果都是应用类型，那么应用程序的性能将显著下降，因为这会加大托管堆的压力，增加垃圾回收的次数。
2. 虽然值类型是一个轻量级的类型，但是如果大量的使用值类型的话，也会有损应用程序的性能（例如下面要讲的装箱和拆箱操作，传递实例较大的值类型，或者返回较大的值类型实例）。
3. 由于值类型实例的值是自己本身，而引用类型的实例的值是一个引用，所以如果将一个值类型的变量赋值给另一个值类型的变量，会执行一次逐字段的复制，将引用类型的变量赋值给另一个引用类型的变量时，只需要复制内存地址，所以在对大对象进行赋值时要避免使用值类型。
## 装箱和拆箱
装箱：所谓装箱就是将值类型转化为引用类型的过程，在装箱时，编译器内部作如下工作：

1.在托管堆中分配好内存，分配的内存量是值类型的各个字段需要的内存量加上托管堆上所以对象的两个额外成员（类型对象指针，同步块索引）需要的内存量
2.值类型的字段复制到新分配的堆内存中
3.返回对象的地址，这个地址就是这个对象的引用

拆箱：将已装箱的值类型实例（此时它已经是引用类型了）转化成值类型的过程